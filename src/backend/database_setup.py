#!/usr/bin/env python3
"""
üóÑÔ∏è Database Setup - VokaFlow Enterprise
Configuraci√≥n y creaci√≥n de tablas de mensajer√≠a
"""

import logging
import sys
from pathlib import Path
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# A√±adir el directorio src al path
sys.path.append(str(Path(__file__).parent))

# Importar modelos de mensajer√≠a
from messaging.models import Base, Conversation, Message, ConversationParticipant

# Configurar base de datos para mensajer√≠a
try:
    from database import DATABASE_URL
    SQLALCHEMY_DATABASE_URL = DATABASE_URL
except ImportError:
    # Si no existe database.py, usar configuraci√≥n por defecto
    SQLALCHEMY_DATABASE_URL = "sqlite:///./vokaflow.db"

# Crear engine exclusivo para mensajer√≠a
from sqlalchemy import create_engine
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})

logger = logging.getLogger(__name__)

def create_tables():
    """Crear todas las tablas de mensajer√≠a"""
    try:
        logger.info("üóÑÔ∏è Creando tablas de mensajer√≠a...")
        
        # Crear todas las tablas
        Base.metadata.create_all(bind=engine)
        
        logger.info("‚úÖ Tablas de mensajer√≠a creadas exitosamente")
        
        # Verificar tablas creadas
        with engine.connect() as conn:
            # Verificar que las tablas existan
            tables_to_check = ["conversations", "messages", "conversation_participants"]
            
            for table_name in tables_to_check:
                try:
                    result = conn.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                    count = result.scalar()
                    logger.info(f"‚úÖ Tabla '{table_name}': {count} registros")
                except Exception as e:
                    logger.error(f"‚ùå Error verificando tabla '{table_name}': {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error creando tablas: {e}")
        return False

def init_sample_data():
    """Inicializar datos de ejemplo"""
    try:
        from sqlalchemy.orm import sessionmaker
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        logger.info("üìù Inicializando datos de ejemplo...")
        
        # Verificar si ya hay datos
        existing_conversations = db.query(Conversation).count()
        if existing_conversations > 0:
            logger.info(f"‚ÑπÔ∏è Ya existen {existing_conversations} conversaciones, saltando inicializaci√≥n")
            db.close()
            return True
        
        # Crear conversaciones de ejemplo
        sample_conversations = [
            {
                "title": "Conversaci√≥n General",
                "description": "Chat general para equipo",
                "type": "group",
                "created_by": 1
            },
            {
                "title": "Soporte T√©cnico",
                "description": "Canal de soporte t√©cnico",
                "type": "support", 
                "created_by": 1
            },
            {
                "title": "Desarrollo VokaFlow",
                "description": "Discusiones sobre desarrollo",
                "type": "channel",
                "created_by": 1
            }
        ]
        
        conversation_ids = []
        
        for conv_data in sample_conversations:
            # Crear conversaci√≥n
            from messaging.models import ConversationType
            conversation = Conversation(
                title=conv_data["title"],
                description=conv_data["description"],
                type=getattr(ConversationType, conv_data["type"].upper()),
                created_by=conv_data["created_by"]
            )
            
            db.add(conversation)
            db.flush()  # Para obtener ID
            
            # A√±adir creador como participante admin
            participant = ConversationParticipant(
                conversation_id=conversation.id,
                user_id=conv_data["created_by"],
                role="admin"
            )
            db.add(participant)
            
            conversation_ids.append(conversation.id)
            logger.info(f"‚úÖ Conversaci√≥n creada: {conversation.title} (ID: {conversation.id})")
        
        # Crear mensajes de ejemplo
        sample_messages = [
            "¬°Hola! Bienvenidos al sistema de mensajer√≠a VokaFlow Enterprise",
            "Este es un ejemplo de mensaje en tiempo real",
            "El sistema soporta diferentes tipos de conversaciones",
            "¬øC√≥mo est√°n funcionando las nuevas caracter√≠sticas?",
            "Excelente trabajo con la implementaci√≥n del chat"
        ]
        
        from messaging.models import MessageType
        for i, conv_id in enumerate(conversation_ids):
            for j, message_text in enumerate(sample_messages[:3]):  # 3 mensajes por conversaci√≥n
                message = Message(
                    conversation_id=conv_id,
                    user_id=1,
                    content=f"{message_text} (Conversaci√≥n {i+1})",
                    message_type=MessageType.TEXT
                )
                db.add(message)
        
        db.commit()
        db.close()
        
        logger.info("‚úÖ Datos de ejemplo inicializados")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error inicializando datos de ejemplo: {e}")
        if 'db' in locals():
            db.rollback()
            db.close()
        return False

def reset_database():
    """Resetear completamente la base de datos"""
    try:
        logger.info("üîÑ Reseteando base de datos...")
        
        # Eliminar todas las tablas
        Base.metadata.drop_all(bind=engine)
        logger.info("‚úÖ Tablas eliminadas")
        
        # Recrear tablas
        create_tables()
        
        # Inicializar datos de ejemplo
        init_sample_data()
        
        logger.info("‚úÖ Base de datos reseteada completamente")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error reseteando base de datos: {e}")
        return False

def check_database_health():
    """Verificar salud de la base de datos"""
    try:
        logger.info("üîç Verificando salud de la base de datos...")
        
        from sqlalchemy.orm import sessionmaker
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        # Contar registros en cada tabla
        tables_info = {}
        
        # Conversaciones
        conv_count = db.query(Conversation).count()
        active_conv_count = db.query(Conversation).filter(Conversation.is_active == True).count()
        tables_info["conversations"] = {
            "total": conv_count,
            "active": active_conv_count
        }
        
        # Mensajes
        msg_count = db.query(Message).count()
        tables_info["messages"] = {
            "total": msg_count
        }
        
        # Participantes
        part_count = db.query(ConversationParticipant).count()
        active_part_count = db.query(ConversationParticipant).filter(ConversationParticipant.is_active == True).count()
        tables_info["participants"] = {
            "total": part_count,
            "active": active_part_count
        }
        
        db.close()
        
        # Mostrar resumen
        logger.info("üìä Estado de la base de datos:")
        for table, info in tables_info.items():
            logger.info(f"  {table}: {info}")
        
        # Verificar integridad b√°sica
        health_score = 100
        if conv_count == 0:
            health_score -= 30
            logger.warning("‚ö†Ô∏è No hay conversaciones en la base de datos")
        
        if msg_count == 0:
            health_score -= 20
            logger.warning("‚ö†Ô∏è No hay mensajes en la base de datos")
        
        if part_count == 0:
            health_score -= 30
            logger.warning("‚ö†Ô∏è No hay participantes en la base de datos")
        
        logger.info(f"üíö Puntuaci√≥n de salud: {health_score}/100")
        
        return {
            "healthy": health_score >= 70,
            "score": health_score,
            "tables": tables_info
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error verificando salud de la base de datos: {e}")
        return {
            "healthy": False,
            "score": 0,
            "error": str(e)
        }

def main():
    """Funci√≥n principal de configuraci√≥n"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Configuraci√≥n de Base de Datos VokaFlow")
    parser.add_argument("--create", action="store_true", help="Crear tablas")
    parser.add_argument("--init-data", action="store_true", help="Inicializar datos de ejemplo")
    parser.add_argument("--reset", action="store_true", help="Resetear base de datos completamente")
    parser.add_argument("--check", action="store_true", help="Verificar salud de la base de datos")
    parser.add_argument("--all", action="store_true", help="Ejecutar todo (crear + inicializar)")
    
    args = parser.parse_args()
    
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    success = True
    
    if args.reset:
        logger.info("üîÑ Ejecutando reset completo...")
        success = reset_database()
    elif args.all:
        logger.info("üöÄ Ejecutando configuraci√≥n completa...")
        success = create_tables() and init_sample_data()
    else:
        if args.create:
            success = create_tables()
        
        if args.init_data and success:
            success = init_sample_data()
        
        if args.check:
            health = check_database_health()
            if not health["healthy"]:
                success = False
    
    if not args.create and not args.init_data and not args.reset and not args.check and not args.all:
        # Por defecto, ejecutar todo
        logger.info("üöÄ No se especificaron opciones, ejecutando configuraci√≥n completa...")
        success = create_tables() and init_sample_data()
    
    if success:
        logger.info("‚úÖ Configuraci√≥n de base de datos completada exitosamente")
        
        # Mostrar resumen final
        health = check_database_health()
        logger.info("üéâ Base de datos lista para VokaFlow Enterprise Messaging")
    else:
        logger.error("‚ùå Hubo errores en la configuraci√≥n de la base de datos")
        sys.exit(1)

if __name__ == "__main__":
    main() 