#!/bin/bash

# =================================================================
# üöÄ VokaFlow Global Command - Sistema de Control Central
# =================================================================

VOKAFLOW_DIR="/opt/vokaflow"
SCRIPT_NAME="vokaflow"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${MAGENTA}üöÄ VokaFlow System Control${NC}"
    echo "================================="
    echo ""
    echo -e "${BLUE}Comandos disponibles:${NC}"
    echo "  start     - Iniciar VokaFlow System"
    echo "  stop      - Detener VokaFlow System"
    echo "  restart   - Reiniciar VokaFlow System"
    echo "  status    - Ver estado del sistema"
    echo "  logs      - Ver logs en tiempo real"
    echo "  health    - Verificar salud del sistema"
    echo "  dashboard - Abrir dashboard en navegador"
    echo "  test      - Probar conexi√≥n con Vicky AI"
    echo ""
    echo -e "${YELLOW}URLs importantes:${NC}"
    echo "  Backend:   http://localhost:8000"
    echo "  API Docs:  http://localhost:8000/docs"
    echo "  Dashboard: file://$VOKAFLOW_DIR/vicky_lab_dashboard/complete.html"
}

# Funci√≥n para verificar si el servicio existe
check_service() {
    if ! systemctl list-unit-files | grep -q "vokaflow-system.service"; then
        echo -e "${RED}‚ùå Servicio vokaflow-system.service no encontrado${NC}"
        echo "Ejecuta: sudo systemctl enable $VOKAFLOW_DIR/vokaflow-system.service"
        exit 1
    fi
}

# Funci√≥n para mostrar status
show_status() {
    echo -e "${BLUE}üìä VokaFlow System Status${NC}"
    echo "========================="
    
    # Estado del servicio systemd
    if systemctl is-active --quiet vokaflow-system.service; then
        echo -e "${GREEN}‚úÖ Servicio systemd: Activo${NC}"
    else
        echo -e "${RED}‚ùå Servicio systemd: Inactivo${NC}"
    fi
    
    # Estado del backend
    if curl -s "http://localhost:8000/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend: Online (http://localhost:8000)${NC}"
        
        # Verificar Vicky
        VICKY_STATUS=$(curl -s "http://localhost:8000/api/vicky/ping" 2>/dev/null)
        if [[ "$VICKY_STATUS" == *"funcionando"* ]]; then
            echo -e "${GREEN}‚úÖ Vicky AI: Online${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Vicky AI: Warning${NC}"
        fi
    else
        echo -e "${RED}‚ùå Backend: Offline${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}üåê URLs:${NC}"
    echo "   Backend:   http://localhost:8000"
    echo "   API Docs:  http://localhost:8000/docs"
    echo "   Dashboard: file://$VOKAFLOW_DIR/vicky_lab_dashboard/complete.html"
}

# Funci√≥n para mostrar logs
show_logs() {
    echo -e "${BLUE}üìã VokaFlow System Logs${NC}"
    echo "========================"
    echo "Presiona Ctrl+C para salir"
    echo ""
    sudo journalctl -u vokaflow-system.service -f
}

# Funci√≥n para test de salud
health_check() {
    echo -e "${BLUE}üè• VokaFlow Health Check${NC}"
    echo "========================="
    
    local health_score=0
    local total_checks=4
    
    # Test 1: Servicio systemd
    if systemctl is-active --quiet vokaflow-system.service; then
        echo -e "${GREEN}‚úÖ Servicio systemd funcionando${NC}"
        ((health_score++))
    else
        echo -e "${RED}‚ùå Servicio systemd no activo${NC}"
    fi
    
    # Test 2: Backend API
    if curl -s "http://localhost:8000/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend API respondiendo${NC}"
        ((health_score++))
    else
        echo -e "${RED}‚ùå Backend API no responde${NC}"
    fi
    
    # Test 3: Vicky AI
    VICKY_RESPONSE=$(curl -s "http://localhost:8000/api/vicky/ping" 2>/dev/null)
    if [[ "$VICKY_RESPONSE" == *"funcionando"* ]]; then
        echo -e "${GREEN}‚úÖ Vicky AI Core funcionando${NC}"
        ((health_score++))
    else
        echo -e "${RED}‚ùå Vicky AI Core no responde${NC}"
    fi
    
    # Test 4: Dashboard
    if [ -f "$VOKAFLOW_DIR/vicky_lab_dashboard/complete.html" ]; then
        echo -e "${GREEN}‚úÖ Dashboard disponible${NC}"
        ((health_score++))
    else
        echo -e "${RED}‚ùå Dashboard no encontrado${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}üìä Resultado:${NC} $health_score/$total_checks checks passed"
    
    if [ $health_score -eq $total_checks ]; then
        echo -e "${GREEN}üéâ Sistema completamente saludable!${NC}"
    elif [ $health_score -ge 2 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Sistema funcionando con advertencias${NC}"
    else
        echo -e "${RED}‚ùå Sistema con problemas cr√≠ticos${NC}"
    fi
}

# Funci√≥n para abrir dashboard
open_dashboard() {
    local dashboard_path="$VOKAFLOW_DIR/vicky_lab_dashboard/complete.html"
    
    if [ ! -f "$dashboard_path" ]; then
        echo -e "${RED}‚ùå Dashboard no encontrado en: $dashboard_path${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üß™ Abriendo VICKY Lab Dashboard...${NC}"
    
    # Determinar el comando para abrir archivos seg√∫n el SO
    if command -v xdg-open > /dev/null; then
        # Linux
        xdg-open "$dashboard_path"
    elif command -v open > /dev/null; then
        # macOS
        open "$dashboard_path"
    elif command -v start > /dev/null; then
        # Windows
        start "$dashboard_path"
    else
        echo -e "${YELLOW}‚ö†Ô∏è No se pudo abrir autom√°ticamente${NC}"
        echo "Por favor abre manualmente: $dashboard_path"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Dashboard abierto en tu navegador${NC}"
    echo -e "${BLUE}üì° Backend disponible en: http://localhost:8000${NC}"
}

# Funci√≥n para test de Vicky
test_vicky() {
    echo -e "${BLUE}üß™ Probando Vicky AI...${NC}"
    echo "======================"
    
    local test_message="Hola Vicky, puedes hacer una presentaci√≥n breve de tus capacidades?"
    
    echo "Enviando mensaje de prueba..."
    echo "Mensaje: $test_message"
    echo ""
    
    local response=$(curl -s -X POST "http://localhost:8000/api/vicky/process" \
        -H "Content-Type: application/json" \
        -d "{\"message\": \"$test_message\"}" 2>/dev/null)
    
    if [ $? -eq 0 ] && [ -n "$response" ]; then
        echo -e "${GREEN}‚úÖ Vicky AI respondi√≥ correctamente:${NC}"
        echo "$response" | grep -o '"response":"[^"]*"' | cut -d'"' -f4 | head -c 200
        echo "..."
    else
        echo -e "${RED}‚ùå Error al comunicarse con Vicky AI${NC}"
        echo "Verifica que el backend est√© funcionando"
    fi
}

# Verificar que estamos en el directorio correcto
if [ ! -d "$VOKAFLOW_DIR" ]; then
    echo -e "${RED}‚ùå Directorio VokaFlow no encontrado: $VOKAFLOW_DIR${NC}"
    exit 1
fi

# Procesar comando
case "$1" in
    start)
        echo -e "${GREEN}üöÄ Iniciando VokaFlow System...${NC}"
        check_service
        sudo systemctl start vokaflow-system.service
        sleep 3
        show_status
        ;;
    stop)
        echo -e "${YELLOW}üõë Deteniendo VokaFlow System...${NC}"
        check_service
        sudo systemctl stop vokaflow-system.service
        echo -e "${GREEN}‚úÖ VokaFlow System detenido${NC}"
        ;;
    restart)
        echo -e "${BLUE}üîÑ Reiniciando VokaFlow System...${NC}"
        check_service
        sudo systemctl restart vokaflow-system.service
        sleep 3
        show_status
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    health)
        health_check
        ;;
    dashboard)
        open_dashboard
        ;;
    test)
        test_vicky
        ;;
    *)
        show_help
        exit 1
        ;;
esac
